# Narrative News

**AI-powered news analysis platform showing multiple perspectives on current events.**

Compare how left-leaning and right-leaning news outlets cover the same stories, with AI-powered analysis revealing framing differences and media bias.

---

## üìä Project Status

**Development Status:** ~75% Complete (MVP Functional)

‚úÖ **Implemented:**
- RSS feed scraping & content extraction
- Story matching algorithm (left vs right sources)
- AI-powered bias analysis (OpenAI GPT-4)
- Dual perspective article database
- Admin dashboard framework
- Newsletter system
- API routes

‚ö†Ô∏è **In Progress:**
- Authentication system
- Production database migration (SQLite ‚Üí PostgreSQL)
- Automated cron scheduling
- Testing infrastructure

üìñ **Documentation:** See `/docs` folder for detailed architecture, roadmap, and business plan

---

## üöÄ Quick Start

### Prerequisites
- Node.js 18+
- npm 8+
- OpenAI API key

### 1. Install Dependencies
```bash
npm install
```

### 2. Environment Setup
```bash
# Copy example environment file
cp .env.example .env.local

# Edit .env.local and add:
# - DATABASE_URL (default: "file:./dev.db" for SQLite)
# - OPENAI_API_KEY (get from https://platform.openai.com/api-keys)
```

### 3. Database Setup
```bash
# Generate Prisma client
npx prisma generate

# Push schema to database
npx prisma db push

# Seed with sample data
npm run db:seed
```

### 4. Run Development Server
```bash
npm run dev
```

### 5. Access Application
- **Main site:** http://localhost:3002
- **Admin panel:** http://localhost:3002/admin (‚ö†Ô∏è No auth yet - secure before production!)

---

## üìÅ Project Structure

```
/app                  # Next.js 14 App Router
  /api               # API routes (articles, AI, automation, admin)
  /admin             # Admin dashboard pages
  page.tsx           # Homepage
  layout.tsx         # Root layout with navigation

/components          # React components
  /features          # Feature components (article cards, newsletter, etc.)

/lib                 # Core business logic
  /services         # Service layer
    ai.ts            # OpenAI GPT-4 integration
    scraper.ts       # RSS scraping & story matching
    email.ts         # Newsletter/email service
    cron.ts          # Automation scheduling
  /db               # Database service (Prisma)
  /utils            # Utilities (middleware, rate limiting)

/prisma
  schema.prisma      # Database schema (SQLite for dev)
  seed.ts            # Database seeding

/docs                # Project documentation
  /architecture      # Technical architecture docs
  /business          # Business plan, metrics, vision
  /development       # Roadmap, gap analysis

/types               # TypeScript type definitions
```

---

## üéØ Key Features

### Implemented ‚úÖ
- **RSS Feed Automation** - Scrapes news from left & right-leaning sources
- **Story Matching** - Identifies same events covered by different outlets (60% similarity threshold)
- **AI Analysis** - GPT-4 compares framing, bias, and language differences
- **Dual Perspective Database** - Each article pairs left + right sources
- **Newsletter System** - Email subscribers with analysis
- **Admin Dashboard** - Article management, subscriber management
- **Analytics** - View tracking, engagement metrics

### Planned üîÑ
- **Authentication** - Secure admin routes
- **Cron Automation** - Scheduled RSS scraping (every 6 hours)
- **PostgreSQL Migration** - Production database
- **Enhanced UI** - Side-by-side article comparison
- **Testing** - Unit & integration tests
- **Redis Caching** - Performance optimization

---

## üõ†Ô∏è Tech Stack

- **Framework:** Next.js 14 (App Router)
- **Language:** TypeScript
- **Database:** SQLite (dev) / PostgreSQL (production)
- **ORM:** Prisma
- **AI:** OpenAI GPT-4
- **Styling:** Tailwind CSS
- **Scraping:** Cheerio, RSS Parser
- **Email:** Nodemailer
- **Scheduling:** node-cron
- **Deployment:** Vercel (recommended)

---

## üîß Environment Variables

### Required
```bash
DATABASE_URL="file:./dev.db"              # SQLite for dev
OPENAI_API_KEY="sk-..."                   # OpenAI API key
```

### Optional (for full functionality)
```bash
# Email (Newsletter)
EMAIL_SERVER_HOST="smtp.gmail.com"
EMAIL_SERVER_PORT="587"
EMAIL_SERVER_USER="your-email@gmail.com"
EMAIL_SERVER_PASSWORD="your-app-password"
EMAIL_FROM="noreply@narrativenews.org"

# Next.js
NEXTAUTH_URL="http://localhost:3002"
NEXTAUTH_SECRET="your-secret-key"

# Site Config
SITE_URL="http://localhost:3002"
ENABLE_AUTOMATION="false"                 # Set to "true" to enable cron
```

---

## üìö Documentation

- **[ROADMAP.md](/docs/ROADMAP.md)** - Development roadmap & phases
- **[CURRENT_ARCHITECTURE.md](/docs/architecture/CURRENT_ARCHITECTURE.md)** - System architecture
- **[GAP_ANALYSIS.md](/docs/development/GAP_ANALYSIS.md)** - What's missing for production
- **[BUSINESS_PLAN.md](/docs/business/BUSINESS_PLAN.md)** - Business model & revenue
- **[Interactive Roadmap](/public/docs/roadmap.html)** - Visual project overview

---

## üöÄ Deployment

### Vercel (Recommended)
```bash
# Install Vercel CLI
npm i -g vercel

# Deploy
vercel
```

**Before deploying to production:**
1. ‚úÖ Set up PostgreSQL database (Vercel Postgres or Supabase)
2. ‚úÖ Add authentication (see Section 2 docs)
3. ‚úÖ Configure environment variables in Vercel dashboard
4. ‚úÖ Update `DATABASE_URL` to PostgreSQL connection string
5. ‚úÖ Run database migrations: `npx prisma migrate deploy`

---

## üß™ Testing

```bash
# Run tests (when implemented)
npm test

# Type checking
npm run type-check

# Linting
npm run lint
```

---

## ü§ù Contributing

This is currently a solo project. For issues or suggestions, please open an issue.

---

## üìÑ License

MIT License - see LICENSE file for details

---

## üôè Acknowledgments

- OpenAI for GPT-4 API
- News outlets for RSS feeds
- Next.js & Vercel teams

---

**Built with the goal of reducing media polarization and promoting media literacy.** üåç
